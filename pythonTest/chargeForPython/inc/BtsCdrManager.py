# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BtsCDRManager')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BtsCDRManager')
    _BtsCDRManager = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BtsCDRManager', [dirname(__file__)])
        except ImportError:
            import _BtsCDRManager
            return _BtsCDRManager
        try:
            _mod = imp.load_module('_BtsCDRManager', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BtsCDRManager = swig_import_helper()
    del swig_import_helper
else:
    import _BtsCDRManager
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SBtsHead(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBtsHead, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBtsHead, name)
    __repr__ = _swig_repr
    __swig_setmethods__["uiLen"] = _BtsCDRManager.SBtsHead_uiLen_set
    __swig_getmethods__["uiLen"] = _BtsCDRManager.SBtsHead_uiLen_get
    if _newclass:
        uiLen = _swig_property(_BtsCDRManager.SBtsHead_uiLen_get, _BtsCDRManager.SBtsHead_uiLen_set)
    __swig_setmethods__["sVersion"] = _BtsCDRManager.SBtsHead_sVersion_set
    __swig_getmethods__["sVersion"] = _BtsCDRManager.SBtsHead_sVersion_get
    if _newclass:
        sVersion = _swig_property(_BtsCDRManager.SBtsHead_sVersion_get, _BtsCDRManager.SBtsHead_sVersion_set)
    __swig_setmethods__["usRcdCnt"] = _BtsCDRManager.SBtsHead_usRcdCnt_set
    __swig_getmethods__["usRcdCnt"] = _BtsCDRManager.SBtsHead_usRcdCnt_get
    if _newclass:
        usRcdCnt = _swig_property(_BtsCDRManager.SBtsHead_usRcdCnt_get, _BtsCDRManager.SBtsHead_usRcdCnt_set)
    __swig_setmethods__["usChdFldIndx"] = _BtsCDRManager.SBtsHead_usChdFldIndx_set
    __swig_getmethods__["usChdFldIndx"] = _BtsCDRManager.SBtsHead_usChdFldIndx_get
    if _newclass:
        usChdFldIndx = _swig_property(_BtsCDRManager.SBtsHead_usChdFldIndx_get, _BtsCDRManager.SBtsHead_usChdFldIndx_set)
    __swig_setmethods__["ucChdFldCnt"] = _BtsCDRManager.SBtsHead_ucChdFldCnt_set
    __swig_getmethods__["ucChdFldCnt"] = _BtsCDRManager.SBtsHead_ucChdFldCnt_get
    if _newclass:
        ucChdFldCnt = _swig_property(_BtsCDRManager.SBtsHead_ucChdFldCnt_get, _BtsCDRManager.SBtsHead_ucChdFldCnt_set)
    __swig_setmethods__["cMthd"] = _BtsCDRManager.SBtsHead_cMthd_set
    __swig_getmethods__["cMthd"] = _BtsCDRManager.SBtsHead_cMthd_get
    if _newclass:
        cMthd = _swig_property(_BtsCDRManager.SBtsHead_cMthd_get, _BtsCDRManager.SBtsHead_cMthd_set)
    __swig_setmethods__["iChk"] = _BtsCDRManager.SBtsHead_iChk_set
    __swig_getmethods__["iChk"] = _BtsCDRManager.SBtsHead_iChk_get
    if _newclass:
        iChk = _swig_property(_BtsCDRManager.SBtsHead_iChk_get, _BtsCDRManager.SBtsHead_iChk_set)
    __swig_setmethods__["sHold"] = _BtsCDRManager.SBtsHead_sHold_set
    __swig_getmethods__["sHold"] = _BtsCDRManager.SBtsHead_sHold_get
    if _newclass:
        sHold = _swig_property(_BtsCDRManager.SBtsHead_sHold_get, _BtsCDRManager.SBtsHead_sHold_set)

    def __init__(self):
        this = _BtsCDRManager.new_SBtsHead()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BtsCDRManager.delete_SBtsHead
    __del__ = lambda self: None
SBtsHead_swigregister = _BtsCDRManager.SBtsHead_swigregister
SBtsHead_swigregister(SBtsHead)

class SBtsChdFld(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBtsChdFld, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBtsChdFld, name)
    __repr__ = _swig_repr
    __swig_setmethods__["usNxtChdFldIndx"] = _BtsCDRManager.SBtsChdFld_usNxtChdFldIndx_set
    __swig_getmethods__["usNxtChdFldIndx"] = _BtsCDRManager.SBtsChdFld_usNxtChdFldIndx_get
    if _newclass:
        usNxtChdFldIndx = _swig_property(_BtsCDRManager.SBtsChdFld_usNxtChdFldIndx_get, _BtsCDRManager.SBtsChdFld_usNxtChdFldIndx_set)
    __swig_setmethods__["ucRcdType"] = _BtsCDRManager.SBtsChdFld_ucRcdType_set
    __swig_getmethods__["ucRcdType"] = _BtsCDRManager.SBtsChdFld_ucRcdType_get
    if _newclass:
        ucRcdType = _swig_property(_BtsCDRManager.SBtsChdFld_ucRcdType_get, _BtsCDRManager.SBtsChdFld_ucRcdType_set)
    __swig_setmethods__["ucIndxWidth"] = _BtsCDRManager.SBtsChdFld_ucIndxWidth_set
    __swig_getmethods__["ucIndxWidth"] = _BtsCDRManager.SBtsChdFld_ucIndxWidth_get
    if _newclass:
        ucIndxWidth = _swig_property(_BtsCDRManager.SBtsChdFld_ucIndxWidth_get, _BtsCDRManager.SBtsChdFld_ucIndxWidth_set)
    __swig_setmethods__["sVersion"] = _BtsCDRManager.SBtsChdFld_sVersion_set
    __swig_getmethods__["sVersion"] = _BtsCDRManager.SBtsChdFld_sVersion_get
    if _newclass:
        sVersion = _swig_property(_BtsCDRManager.SBtsChdFld_sVersion_get, _BtsCDRManager.SBtsChdFld_sVersion_set)
    __swig_setmethods__["usIndxCnt"] = _BtsCDRManager.SBtsChdFld_usIndxCnt_set
    __swig_getmethods__["usIndxCnt"] = _BtsCDRManager.SBtsChdFld_usIndxCnt_get
    if _newclass:
        usIndxCnt = _swig_property(_BtsCDRManager.SBtsChdFld_usIndxCnt_get, _BtsCDRManager.SBtsChdFld_usIndxCnt_set)
    __swig_setmethods__["usIndxTbl"] = _BtsCDRManager.SBtsChdFld_usIndxTbl_set
    __swig_getmethods__["usIndxTbl"] = _BtsCDRManager.SBtsChdFld_usIndxTbl_get
    if _newclass:
        usIndxTbl = _swig_property(_BtsCDRManager.SBtsChdFld_usIndxTbl_get, _BtsCDRManager.SBtsChdFld_usIndxTbl_set)

    def __init__(self):
        this = _BtsCDRManager.new_SBtsChdFld()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BtsCDRManager.delete_SBtsChdFld
    __del__ = lambda self: None
SBtsChdFld_swigregister = _BtsCDRManager.SBtsChdFld_swigregister
SBtsChdFld_swigregister(SBtsChdFld)

class BtsCDRmanager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BtsCDRmanager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BtsCDRmanager, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _BtsCDRManager.new_BtsCDRmanager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BtsCDRManager.delete_BtsCDRmanager
    __del__ = lambda self: None

    def ParseBtsCDR(self, FileName, sourceDir, desDir):
        return _BtsCDRManager.BtsCDRmanager_ParseBtsCDR(self, FileName, sourceDir, desDir)
BtsCDRmanager_swigregister = _BtsCDRManager.BtsCDRmanager_swigregister
BtsCDRmanager_swigregister(BtsCDRmanager)

# This file is compatible with both classic and new-style classes.


